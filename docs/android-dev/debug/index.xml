<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Android 调试篇 on Ethen 的实验室</title>
    <link>https://ethen-cao.github.io/ethenslab/android-dev/debug/</link>
    <description>Recent content in Android 调试篇 on Ethen 的实验室</description>
    <generator>Hugo -- 0.150.1</generator>
    <language>en</language>
    <lastBuildDate>Wed, 01 Oct 2025 11:36:11 +0800</lastBuildDate>
    <atom:link href="https://ethen-cao.github.io/ethenslab/android-dev/debug/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用 Visual Studio Code 高效开发 AOSP</title>
      <link>https://ethen-cao.github.io/ethenslab/android-dev/debug/vscode-aosp/</link>
      <pubDate>Wed, 01 Oct 2025 11:36:11 +0800</pubDate>
      <guid>https://ethen-cao.github.io/ethenslab/android-dev/debug/vscode-aosp/</guid>
      <description>&lt;h2 id=&#34;概述&#34;&gt;&lt;strong&gt;概述&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;本文档旨在为 AOSP 开发者提供一份详尽的指南，说明如何将 Visual Studio Code (VS Code) 配置成一个功能强大、响应迅速的 C/C++/Java 代码开发环境。&lt;/p&gt;
&lt;p&gt;传统的 AOSP 开发可能依赖于功能强大但资源消耗巨大的 IDE（如 Android Studio for platform a.k.a. IntelliJ），或者纯文本编辑器搭配命令行工具。本指南采用 &lt;code&gt;VS Code&lt;/code&gt; + &lt;code&gt;clangd&lt;/code&gt; 的组合，旨在达到两者的平衡：既拥有现代 IDE 的强大代码导航和智能感知能力，又保持了轻量级编辑器的流畅体验。&lt;/p&gt;
&lt;h2 id=&#34;核心优势&#34;&gt;&lt;strong&gt;核心优势&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;极致性能&lt;/strong&gt;：&lt;code&gt;clangd&lt;/code&gt; 提供了比其他方案更快的索引速度和近乎瞬时的代码补全、跳转响应。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高度精确&lt;/strong&gt;：&lt;code&gt;clangd&lt;/code&gt; 与 AOSP 使用的 Clang 编译器同源，其代码分析、错误和警告提示与实际编译结果几乎完全一致。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源友好&lt;/strong&gt;：相较于大型 IDE，此方案在处理庞大的 AOSP 代码库时，内存和 CPU 占用更优。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高度可定制&lt;/strong&gt;：可以根据个人习惯，通过丰富的 VS Code 扩展生态打造专属的开发环境。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前期准备-prerequisites&#34;&gt;&lt;strong&gt;前期准备 (Prerequisites)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;在开始配置 VS Code 之前，请确保完成以下准备工作。&lt;/p&gt;
&lt;h3 id=&#34;硬件建议&#34;&gt;&lt;strong&gt;硬件建议&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;AOSP 是一个巨型项目。为了获得流畅体验，建议您的开发设备满足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;内存 (RAM)&lt;/strong&gt;: 32 GB 或更多。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;存储 (Storage)&lt;/strong&gt;: 高速 SSD，并确保有至少 500 GB 的可用空间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CPU&lt;/strong&gt;: 8 核或更多。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;aosp-源码同步&#34;&gt;&lt;strong&gt;AOSP 源码同步&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;确保您已成功将 AOSP 源码同步到本地。本文档中的所有路径都将以 AOSP 的根目录作为基准。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Android Binder Proxy 限制机制</title>
      <link>https://ethen-cao.github.io/ethenslab/android-dev/debug/android_binderproxy_detection/</link>
      <pubDate>Mon, 29 Sep 2025 11:36:11 +0800</pubDate>
      <guid>https://ethen-cao.github.io/ethenslab/android-dev/debug/android_binderproxy_detection/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://ethen-cao.github.io/ethenslab/images/binderproxy.drawio.png&#34;&gt;
本图描述了 Android 系统中 &lt;strong&gt;Binder Proxy 数量限制（BinderProxy Limit）&lt;/strong&gt; 的实现流程，涉及 &lt;code&gt;ActivityManagerService&lt;/code&gt;、&lt;code&gt;BinderInternal&lt;/code&gt;、JNI 层、&lt;code&gt;BpBinder&lt;/code&gt; 等关键组件。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;1-关键模块&#34;&gt;1. 关键模块&lt;/h2&gt;
&lt;h3 id=&#34;11-java-层&#34;&gt;1.1 Java 层&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ActivityManagerService (AMS)&lt;/strong&gt;
系统服务的核心，负责启用 Binder Proxy 限制，并设置回调。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;BinderInternal&lt;/strong&gt;
桥接 AMS 与 Native 层的接口类，提供&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nSetBinderProxyCountEnabled&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setBinderProxyCountCallback&lt;/code&gt;
等方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;BinderProxyLimitListener / Delegate&lt;/strong&gt;
当达到 Binder Proxy 数量上限时被触发，执行对应的回调逻辑。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;12-native-层-jni&#34;&gt;1.2 Native 层 (JNI)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;libandroid_runtime&lt;/strong&gt;
JNI 桥接库，实现了 &lt;code&gt;android_os_BinderInternal_setBinderProxyCountEnabled&lt;/code&gt; 与回调代理 &lt;code&gt;android_os_BinderInternal_proxyLimitcallback&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;libbinder&lt;/strong&gt;
Binder 内核通信库，负责 Binder 代理对象的创建与管理。
其中 &lt;code&gt;BpBinder::create&lt;/code&gt; 在生成 Binder 代理对象时进行计数与节流。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;2-调用流程&#34;&gt;2. 调用流程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;AMS 启动限制&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ActivityManagerService&lt;/code&gt; 调用
&lt;code&gt;BinderInternal.nSetBinderProxyCountEnabled(true)&lt;/code&gt;
以启用 Binder Proxy 限制。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;设置回调&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Binder spam detection原理</title>
      <link>https://ethen-cao.github.io/ethenslab/android-dev/debug/spamming-oneway/</link>
      <pubDate>Sun, 28 Sep 2025 11:36:11 +0800</pubDate>
      <guid>https://ethen-cao.github.io/ethenslab/android-dev/debug/spamming-oneway/</guid>
      <description>&lt;h2 id=&#34;binder-spam-detection原理&#34;&gt;Binder spam detection原理&lt;/h2&gt;
&lt;p&gt;当Binder异步通信消耗了过多的binder buffer的时候，会打印出如下log:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;IPCThreadState: Process seems to be sending too many oneway calls.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;核心原因&#34;&gt;核心原因&lt;/h3&gt;
&lt;p&gt;这个日志的根本原因在于 &lt;strong&gt;Kernel 层的 Binder 驱动程序&lt;/strong&gt; 检测到某个进程发送了过多的 oneway（异步）调用，导致为 oneway 调用预留的 &lt;strong&gt;异步缓冲区空间 (async space) 严重不足&lt;/strong&gt;。这是一种保护机制，旨在防止某个进程因滥发 oneway 调用而耗尽 Binder 资源，影响系统其他进程的正常通信。&lt;/p&gt;
&lt;p&gt;整个检测和通知流程可以概括为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;客户端发起 Oneway 调用&lt;/strong&gt;：进程通过 &lt;code&gt;transact()&lt;/code&gt; 发起一个带有 &lt;code&gt;TF_ONE_WAY&lt;/code&gt; 标志的 Binder 调用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内核分配缓冲区&lt;/strong&gt;：Binder 驱动在内核空间为这个 oneway 事务分配内存。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内核进行垃圾邮件检测 (Spam Detection)&lt;/strong&gt;：在分配内存时，内核会检查剩余的&lt;strong&gt;异步缓冲区空间&lt;/strong&gt;。如果空间低于某个阈值（总空间的 10%），驱动就会开始怀疑有进程在“滥发” oneway 调用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;标记可疑事务&lt;/strong&gt;：如果异步空间过低，驱动会进一步检查当前发起调用的这个进程，是否占用了过多的 oneway 缓冲区（例如，超过 50 个缓冲区或总大小超过总空间的 25%）。如果满足条件，内核就会给这个事务的缓冲区打上 &lt;code&gt;oneway_spam_suspect&lt;/code&gt; 的标记。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内核返回特殊指令&lt;/strong&gt;：对于一个 oneway 调用，内核需要立即给客户端一个“完成”回执。此时，如果发现事务缓冲区有 &lt;code&gt;oneway_spam_suspect&lt;/code&gt; 标记，内核就不会返回常规的 &lt;code&gt;BR_TRANSACTION_COMPLETE&lt;/code&gt;，而是返回一个特殊的 &lt;code&gt;BR_ONEWAY_SPAM_SUSPECT&lt;/code&gt; 指令。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户空间打印日志&lt;/strong&gt;：客户端的 &lt;code&gt;IPCThreadState&lt;/code&gt; 在 &lt;code&gt;waitForResponse()&lt;/code&gt; 中接收并解析来自内核的指令。当它收到 &lt;code&gt;BR_ONEWAY_SPAM_SUSPECT&lt;/code&gt; 时，就会打印出这条我们看到的错误日志。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;代码分析&#34;&gt;代码分析&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户空间日志打印点 (IPCThreadState.cpp)&lt;/strong&gt;
在 &lt;code&gt;IPCThreadState::waitForResponse&lt;/code&gt; 函数中，它处理从 Binder 驱动返回的各种指令 (&lt;code&gt;BR_*&lt;/code&gt;)。其中就包括 &lt;code&gt;BR_ONEWAY_SPAM_SUSPECT&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>深入解析 Android ProtoLog：高性能结构化日志系统</title>
      <link>https://ethen-cao.github.io/ethenslab/android-dev/debug/protolog/</link>
      <pubDate>Thu, 28 Aug 2025 19:54:57 +0800</pubDate>
      <guid>https://ethen-cao.github.io/ethenslab/android-dev/debug/protolog/</guid>
      <description>&lt;p&gt;在 Android 系统开发和性能优化中，日志记录是一个不可或缺的工具。然而，传统的字符串日志（如 Log.d, Log.e）在高频或性能敏感的场景下会带来显著的开销。为了解决这个问题，Android 团队引入了一套名为 &lt;strong&gt;ProtoLog&lt;/strong&gt; 的高性能日志系统。本文将深入探讨 ProtoLog 的设计理念、工作机制、使用场景以及如何为 ROM 开发进行扩展。&lt;/p&gt;
&lt;h2 id=&#34;1-简介protolog-是什么&#34;&gt;&lt;strong&gt;1. 简介：ProtoLog 是什么？&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ProtoLog&lt;/strong&gt; 是一套高性能、低开销的日志记录框架，深度集成在 Android 开源项目 (AOSP) 中。它的核心思想是将日志记录对运行时性能的影响降到最低。&lt;/p&gt;
&lt;p&gt;与传统的 android.util.Log 不同，ProtoLog &lt;strong&gt;不会在设备运行时处理和拼接日志字符串&lt;/strong&gt;。相反，它通过一个精巧的&lt;strong&gt;编译时转换&lt;/strong&gt;机制，将日志调用替换为写入紧凑二进制数据的指令。这使得即使在生产环境中开启大量日志，也不会对设备性能造成明显影响。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;核心优势：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;极致性能&lt;/strong&gt;：避免了运行时的字符串操作、格式化和内存分配，CPU 和内存开销极低。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;二进制格式&lt;/strong&gt;：日志以高效的 Protocol Buffers (Protobuf) 格式写入流中，体积小，便于机器解析。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;编译时处理&lt;/strong&gt;：大部分工作（如解析格式化字符串）在编译代码时完成，而非在设备上。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态控制&lt;/strong&gt;：可以通过 adb 命令动态开启或关闭不同的日志组，无需重新编译或重启设备。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-架构与工作机制&#34;&gt;&lt;strong&gt;2. 架构与工作机制&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;ProtoLog 的魔力在于其独特的编译时处理流程。它主要由以下几个部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ProtoLog API&lt;/strong&gt;：供开发者调用的日志接口，如 ProtoLog.d(GROUP, &amp;ldquo;format string %d&amp;rdquo;, value)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Javac 编译器插件&lt;/strong&gt;：这是 ProtoLog 的核心。在 Java 代码编译期间，该插件会扫描所有 ProtoLog API 调用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;二进制日志流&lt;/strong&gt;：设备上实际记录的数据格式，它不包含原始的字符串，并被写入一个专用的 protolog 日志缓冲区。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Viewer (查看器) 工具&lt;/strong&gt;：用于将设备上捕获的二进制日志流转换回人类可读的文本格式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;工作流程详解&#34;&gt;&lt;strong&gt;工作流程详解&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;让我们通过一个例子来理解其完整的工作流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;编写代码&lt;br&gt;
开发者在代码中写入一条 ProtoLog 日志：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.android.server.wm.ProtoLogGroup;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; com.android.internal.protolog.common.ProtoLog;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ...  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ProtoLog.&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;(ProtoLogGroup.&lt;span style=&#34;color:#a6e22e&#34;&gt;WM_DEBUG_ORIENTATION&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Setting orientation to %d&amp;#34;&lt;/span&gt;, newOrientation);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译时转换 (关键步骤)&lt;br&gt;
当编译器（Javac）处理这段代码时，ProtoLog 的编译器插件会执行以下操作：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Android log机制</title>
      <link>https://ethen-cao.github.io/ethenslab/android-dev/debug/log/</link>
      <pubDate>Wed, 27 Aug 2025 11:36:11 +0800</pubDate>
      <guid>https://ethen-cao.github.io/ethenslab/android-dev/debug/log/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://ethen-cao.github.io/ethenslab/images/android-eventlog.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;架構圖詳解&#34;&gt;架構圖詳解&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;日誌寫入路徑 (Write Path)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;起點&lt;/strong&gt;: 應用程式或 Android 框架服務 (如 &lt;code&gt;ActivityManagerService&lt;/code&gt;) 調用 &lt;code&gt;android.util.EventLog.writeEvent()&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;轉換&lt;/strong&gt;: 呼叫通過 JNI 進入原生層，由 &lt;code&gt;liblog.so&lt;/code&gt; 這個 C/C++ 函式庫接管。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通信接口&lt;/strong&gt;: &lt;code&gt;liblog&lt;/code&gt; 通過一個名為 &lt;code&gt;/dev/socket/logdw&lt;/code&gt; (logd writer) 的 UNIX Domain Socket，將事件日誌以高效的二進位格式 (&lt;code&gt;logger_entry&lt;/code&gt; 結構) 發送給 &lt;code&gt;logd&lt;/code&gt; 守護進程。這是一個單向的寫入操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;logd&lt;/code&gt; 內部實現 (Log Daemon Internals)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Socket Listener&lt;/strong&gt;: &lt;code&gt;logd&lt;/code&gt; 內部有一個專門的線程，負責監聽 &lt;code&gt;/dev/socket/logdw&lt;/code&gt; 接口，接收來自系統中所有進程的日誌數據。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ring Buffers&lt;/strong&gt;: 接收到的日誌會被分門別類地存入對應的&lt;strong&gt;內存中環形緩衝區 (In-Memory Ring Buffers)&lt;/strong&gt;。對於 EventLog，數據被寫入名為 &lt;code&gt;events&lt;/code&gt; 的緩衝區。這是一個高效的內存數據結構，當寫滿時會自動覆蓋最舊的紀錄。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Command Listener&lt;/strong&gt;: &lt;code&gt;logd&lt;/code&gt; 同時也監聽另一個 Socket &lt;code&gt;/dev/socket/logdr&lt;/code&gt; (logd reader)，用於接收來自 &lt;code&gt;logcat&lt;/code&gt; 等客戶端的讀取指令。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;日誌讀取與解析路徑 (Read &amp;amp; Parse Path)&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用AndroidStudio调试AOSP</title>
      <link>https://ethen-cao.github.io/ethenslab/android-dev/debug/using-androidstudio-to-debug-aosp/</link>
      <pubDate>Fri, 08 Aug 2025 11:36:11 +0800</pubDate>
      <guid>https://ethen-cao.github.io/ethenslab/android-dev/debug/using-androidstudio-to-debug-aosp/</guid>
      <description>&lt;h2 id=&#34;调试java进程&#34;&gt;调试Java进程&lt;/h2&gt;
&lt;p&gt;本文介绍如何在 Android Studio 中调试 AOSP (Android Open Source Project) 进程，尤其是像 system_server 这样的系统进程。调试 AOSP 与普通应用调试有所不同，需要借助 JDWP 协议和 adb 端口转发。&lt;/p&gt;
&lt;h3 id=&#34;前置条件&#34;&gt;前置条件&lt;/h3&gt;
&lt;p&gt;环境准备：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一台可以刷入 AOSP 的设备或模拟器&lt;/li&gt;
&lt;li&gt;已编译好的 AOSP（推荐 userdebug 或 eng 构建）&lt;/li&gt;
&lt;li&gt;PC 上安装 Android Studio（最新版）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;权限要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设备必须支持 adb root&lt;/li&gt;
&lt;li&gt;设备需要打开调试属性，例如：
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;adb root
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;adb shell setprop persist.system_server.debuggable &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;adb shell stop
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;adb shell start
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;上述命令让 system_server 在启动时支持调试。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;调试原理&#34;&gt;调试原理&lt;/h3&gt;
&lt;p&gt;Android 使用 JDWP (Java Debug Wire Protocol) 进行 Java 进程调试：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;system_server 内部：包含一个 JDWP Listener 线程，负责接收调试命令并执行（挂起线程、返回堆栈、单步执行等）。&lt;/li&gt;
&lt;li&gt;adb：提供 adb forward 功能，将 PC 本地端口与设备进程的 JDWP 通道连接起来。&lt;/li&gt;
&lt;li&gt;Android Studio：作为调试器，通过 JDWP 协议与 system_server 通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据流示意：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
