@startuml
!theme materia
skinparam SequenceLifeLineBorderColor black
skinparam ArrowColor #555555
skinparam defaultFontColor #000000
autonumber "<b>[00]"
' 增加此行来压缩布局，数值可以根据需要调整
skinparam ParticipantPadding 10

title 智能座舱软件开发流程: 从代码下载到 OTA 发布 (最终优化版)

' === 阶段 1: 代码下载 ===
box "开发者工作流" #LightBlue
  "开发者\n(Developer)" -> "Manifest 仓库\n(Manifest)": **[repo init]** 获取项目清单
  note right: 初始化 repo 环境，拉取 manifest.xml
  "开发者\n(Developer)" -> "Git 仓库\n(Source code gits)": **[repo sync]** 同步所有源码
  note right: 通过 Gerrit 代理，根据 Manifest 拉取
end box

' === 阶段 2: 代码提交 ===
box "开发者工作流" #LightBlue
  "开发者\n(Developer)" -> "开发者\n(Developer)": **[repo start & git commit]** 本地开发
  note right: 开发座舱功能 (e.g., UI, 导航模块)
  "开发者\n(Developer)" -> "Gerrit 服务器\n(GerritServer)": **[repo upload]** 提交代码审核
  activate "Gerrit 服务器\n(GerritServer)"
end box

' === 阶段 3: 代码审核 ===
box "审核与验证" #LightGreen
  par 并行: CI 验证 & 人工评审
    "Gerrit 服务器\n(GerritServer)" -> "Jenkins 服务器\n(JenkinsServer)": **[Webhook]** 触发 CI 验证
    activate "Jenkins 服务器\n(JenkinsServer)"
    note right: 拉取 patchset 代码
    
    "Jenkins 服务器\n(JenkinsServer)" -> "静态分析服务器\n(SonarQube)": **[Scan]** 静态代码分析
    "静态分析服务器\n(SonarQube)" --> "Jenkins 服务器\n(JenkinsServer)": 返回分析报告 (Quality Gate)
    
    "Jenkins 服务器\n(JenkinsServer)" -> "JFrog 制品库\n(Artifacts)": **[Download]** 拉取构建依赖
    activate "JFrog 制品库\n(Artifacts)"
    "JFrog 制品库\n(Artifacts)" --> "Jenkins 服务器\n(JenkinsServer)": 返回依赖
    deactivate "JFrog 制品库\n(Artifacts)"
    
    "Jenkins 服务器\n(JenkinsServer)" -> "Jenkins 服务器\n(JenkinsServer)": **编译 & 单元测试** (e.g., GoogleTest)
    
    alt 验证通过 (编译成功 & SonarQube 通过)
      "Jenkins 服务器\n(JenkinsServer)" -> "Gerrit 服务器\n(GerritServer)": **[Feedback]** Verified +1
    else 验证失败
      "Jenkins 服务器\n(JenkinsServer)" -> "Gerrit 服务器\n(GerritServer)": **[Feedback]** Verified -1
      "Gerrit 服务器\n(GerritServer)" --> "开发者\n(Developer)": 通知修复 (附带错误报告链接)
      "开发者\n(Developer)" -> "开发者\n(Developer)": **修改代码** (git commit --amend)
      "开发者\n(Developer)" -> "Gerrit 服务器\n(GerritServer)": **[repo upload]** 提交新 patchset
    end
    deactivate "Jenkins 服务器\n(JenkinsServer)"

    "审核者\n(Reviewer)" -> "Gerrit 服务器\n(GerritServer)": **[Review]** 人工评审 & 打分 (+2/-2)
    note right: 检查代码质量、功能完整性
  end par
end box

' === 阶段 4: 代码入库 ===
box "代码合并" #LightGreen
  ' 审核拒绝的流程已在阶段3闭环，这里只展示成功路径，使逻辑更清晰
  alt 审核通过 (Verified +1 & Code-Review +2)
    "Gerrit 服务器\n(GerritServer)" -> "Git 仓库\n(Source code gits)": **[Merge]** 合并到主分支
    deactivate "Gerrit 服务器\n(GerritServer)"
    note right of "Gerrit 服务器\n(GerritServer)": Gerrit 执行 merge 操作，代码正式入库
  end
end box

' === 阶段 5: Daily/Weekly 发布 ===
box "CI/CD 发布" #Wheat
  "定时器\n(Scheduler)" -> "Jenkins 服务器\n(JenkinsServer)": **[Time Trigger]** 触发 Daily/Weekly 构建
  activate "Jenkins 服务器\n(JenkinsServer)"
  note right: 定时任务启动，拉取主干在\n特定时间点的最新代码
  "Jenkins 服务器\n(JenkinsServer)" -> "Jenkins 服务器\n(JenkinsServer)": **执行完整构建** (编译、打包)
  "Jenkins 服务器\n(JenkinsServer)" -> "Git 仓库\n(Source code gits)": **[Git Tag]** 创建版本标签 (e.g., vX.Y.Z)
  "Jenkins 服务器\n(JenkinsServer)" -> "JFrog 制品库\n(Artifacts)": **[Upload]** 上传构建产物
  activate "JFrog 制品库\n(Artifacts)"
  note right: 归档版本到 Daily/Weekly 仓库
  deactivate "JFrog 制品库\n(Artifacts)"

  ' 新增: 触发自动化集成测试
  "Jenkins 服务器\n(JenkinsServer)" -> "HIL/SIL 测试平台": **[Deploy & Test]** 部署并运行集成测试
  note right: 例如，自动刷机到硬件在环平台，\n执行 BVT (Build Verification Test)
  "HIL/SIL 测试平台" --> "Jenkins 服务器\n(JenkinsServer)": 返回测试报告
  
  alt 构建与测试成功
     "Jenkins 服务器\n(JenkinsServer)" --> "Gerrit 服务器\n(GerritServer)": 通知版本发布成功 (附带报告链接)
  else 构建或测试失败
     "Jenkins 服务器\n(JenkinsServer)" --> "Gerrit 服务器\n(GerritServer)": 通知管理员检查失败原因
  end
  deactivate "Jenkins 服务器\n(JenkinsServer)"
end box

' === 阶段 6: OTA 发布 ===
box "OTA 部署" #LightCoral
  "部署服务器\n(DeployServer)" -> "JFrog 制品库\n(Artifacts)": **[Download]** 拉取已验证的稳定版
  activate "JFrog 制品库\n(Artifacts)"
  note right: 通常由版本经理手动挑选\n一个测试充分的 Weekly 版本
  deactivate "JFrog 制品库\n(Artifacts)"
  "部署服务器\n(DeployServer)" -> "部署服务器\n(DeployServer)": **签名** OTA 包
  note right: 使用生产环境密钥进行安全签名
  "部署服务器\n(DeployServer)" -> "OTA 服务器\n(OTAServer)": **[Upload]** 上传已签名 OTA 包及元数据
  activate "OTA 服务器\n(OTAServer)"
end box

' === 阶段 7: OTA 推送与车辆更新 ===
box "OTA 更新" #LightCoral
  "部署服务器\n(DeployServer)" -> "OTA 服务器\n(OTAServer)": **[Campaign]** 创建升级活动
  note right: 按策略 (灰度/分批/区域)
  "OTA 服务器\n(OTAServer)" -> "TSP 服务器\n(TSPServer)": **[Query]** 查询符合条件的车辆
  activate "TSP 服务器\n(TSPServer)"
  "TSP 服务器\n(TSPServer)" --> "OTA 服务器\n(OTAServer)": 返回车辆列表 (带认证)
  "TSP 服务器\n(TSPServer)" -> "车辆\n(Cars)": **[Notify]** 推送升级通知
  "车辆\n(Cars)" -> "OTA 服务器\n(OTAServer)": **[Check Update]** 检查更新
  "OTA 服务器\n(OTAServer)" --> "车辆\n(Cars)": 返回元数据 (版本、依赖、强制标记)
  alt 用户同意或强制更新
    "车辆\n(Cars)" -> "OTA 服务器\n(OTAServer)": **[Download]** 下载 OTA 包
    note right: 检查网络、电量等条件
    "车辆\n(Cars)" -> "车辆\n(Cars)": **验证 & 执行升级** (停车/安全条件下)
    "车辆\n(Cars)" -> "TSP 服务器\n(TSPServer)": **[Report]** 上报升级结果
    "TSP 服务器\n(TSPServer)" -> "OTA 服务器\n(OTAServer)": **[Update Status]** 同步车辆状态
  else 下载/升级失败
    "车辆\n(Cars)" --> "TSP 服务器\n(TSPServer)": 上报错误
    "TSP 服务器\n(TSPServer)" --> "OTA 服务器\n(OTAServer)": 触发重试或回滚
  end
  deactivate "OTA 服务器\n(OTAServer)"
  deactivate "TSP 服务器\n(TSPServer)"
end box

@enduml