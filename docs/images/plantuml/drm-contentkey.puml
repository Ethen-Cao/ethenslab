@startuml
!theme plain

skinparam defaultFontName "Roboto, sans-serif"
skinparam defaultFontColor #000000
skinparam sequenceArrowColor #555555
skinparam actorBorderColor #333333
skinparam participantBorderColor #333333
skinparam participantBackgroundColor #f9f9f9
skinparam defaultFontColor #000000

title Widevine L1 核心流程（安全关键点高亮版）

actor User
participant App as "App / Media Player"
participant MediaDrm as "Android MediaDrm API"
participant MediaCrypto as "Android MediaCrypto API"
participant TEE as "Device TEE / Widevine CDM\n(Secure Path)"
participant LicenseServer as "License Server"
participant SecureDecoder as "Secure Hardware Decoder"

== 阶段1: 设备首次注册 / 公钥上报 ==
App -> MediaDrm: 1. new MediaDrm instance
MediaDrm -> TEE: 2. 初始化 DRM 会话
note right: 设备生成 Device Key Pair\nPrivate Key 永不出TEE
TEE -> MediaDrm: 3. generateProvisioningRequest()\n  (Device Certificate)
MediaDrm -> App: 4. 返回 Device Certificate
App -> LicenseServer: 5. 发送 Device Certificate
LicenseServer -> LicenseServer: 6. 验证签名并保存设备公钥

== 阶段2: 许可证请求与 Content Key 加密 ==
App -> MediaDrm: 7. getLicenseRequest(Content ID)
MediaDrm -> TEE: 8. 生成许可证请求 (签名)
TEE -> MediaDrm: 9. 返回请求数据
MediaDrm -> App: 10. 返回请求数据
App -> LicenseServer: 11. 发送许可证请求
LicenseServer -> LicenseServer: 12. 使用设备公钥加密 Content Key
LicenseServer --> App: 13. 返回加密许可证
App -> MediaDrm: 14. provideProvisionResponse
MediaDrm -> TEE: 15. 提供加密许可证
TEE -> TEE: 16. 使用私钥解密得到 Content Key
TEE --> MediaDrm: 17. 返回 Content Key 会话句柄

== 阶段3: 视频解密与 Secure Path 渲染 ==
App -> MediaDrm: 18. new MediaCrypto Instance
MediaDrm -> MediaCrypto: 19. 关联 Content Key 会话句柄
App -> MediaDrm: 20. 配置 MediaCodec

loop 视频播放循环
    App -> MediaCrypto: 21. 提供加密视频片段
    MediaCrypto -> TEE: 22. 传递加密数据
    TEE -> TEE: 23. 使用 Content Key 解密
    TEE -[#Red]-> SecureDecoder: 24. 传递解密后帧Secure Buffer
    note right: 关键! 数据仅在 Secure Path 内传递\nApp/系统不可访问
    SecureDecoder -> User: 25. 渲染视频帧
end

@enduml
