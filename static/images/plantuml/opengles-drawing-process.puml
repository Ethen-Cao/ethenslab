@startuml
!theme plain
skinparam defaultFontName "Roboto, sans-serif"
skinparam defaultFontColor #000000

rectangle "Application" {
  [绘制逻辑: glDraw*, glClear] as AppDraw
  [请求显示: eglSwapBuffers] as AppSwap
}

rectangle "EGL" {
  [EGLContext] as EGLContext
  [Surface/Buffer 管理] as EGLSurface
  [命令 flush & 提交 GPU Driver] as EGLSubmit
}

rectangle "GPU Driver / GPU" {
  [GPU Driver] as GPUDriver
  [GPU 硬件] as GPU
  [Framebuffer/后台缓冲区] as FB
}

rectangle "Display System" {
  [Screen / OpenWFD / Display Driver] as Display
  [Display Controller / Physical Screen] as DisplayCtrl
}

"Application" -[hidden]- "EGL"
"EGL" -[hidden]- "GPU Driver / GPU"
"GPU Driver / GPU" -[hidden]- "Display System" 

' === 绘制阶段 ===
AppDraw -> EGLContext : 1. 调用 OpenGL ES API (glDraw*, glClear)
EGLContext -> EGLContext : 2. 命令记录在客户端 Command Buffer,此时 GPU 尚未执行命令

' === 提交阶段 ===
AppSwap -> EGLSurface : 3. 调用 eglSwapBuffers()
EGLSurface -> EGLSubmit : 4. flush 命令到 GPU Driver
EGLSubmit -> GPUDriver : 5. GPU Driver 收到命令
GPUDriver -> GPU : 6. GPU 开始异步执行渲染
GPU ..> FB : 7. 渲染结果写入后台缓冲区,渲染完成由 Fence 信号通知

' === 提交显示阶段 ===
EGLSurface -> Display : 8. buffer + Fence 交给显示系统
Display -> DisplayCtrl : 9. pointer flip / scanout
DisplayCtrl -> DisplayCtrl : 10. 显示最终画面

@enduml
